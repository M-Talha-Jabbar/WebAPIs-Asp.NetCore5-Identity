using API.Authorization.Handlers;
using API.Authorization.Requirements;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Identity;
using Microsoft.Extensions.DependencyInjection;
using Repository.Data;
using Repository.Identity;
using System;

namespace API.Extensions
{
    public static class IdentityServiceExtensions
    {
        public static IServiceCollection AddIdentityModelServices(this IServiceCollection services)
        {
            // configuring ASP.NET Core Identity
            services.AddIdentity<ApplicationUser, IdentityRole>(options => // We are using the IdentityOptions object to configure PasswordOptions.
            {
                // We could also use this IdentityOptions object to configure: UserOptions, SignInOptions, LockoutOptions, TokenOptions, StoreOptions, ClaimsIdentityOptions.
                options.Password.RequireNonAlphanumeric = false;
                options.Password.RequireUppercase = false;
                options.Password.RequireDigit = false;
                options.SignIn.RequireConfirmedEmail = true;
            })
            .AddEntityFrameworkStores<AppDBContext>()
            .AddDefaultTokenProviders(); // Adds the default token providers used to generate tokens for email confirmation, password reset, two factor authentication etc.
            // Tokens are generated by the built-in (i.e. default) DataProtectorTokenProvider class.
            // Tokens cannot be used after they have expired. The default token lifespan is one day. We can change this to meet our application requirements.

            services.Configure<DataProtectionTokenProviderOptions>(o =>
            {
                o.TokenLifespan = TimeSpan.FromHours(5); // sets the life span of all the tokens generated by DataProtectorTokenProvider class to 5 hours.
            });

            return services;
        }
        public static IServiceCollection AddIdentityServices(this IServiceCollection services)
        {
            services.AddAuthorization(options =>
            {
                options.AddPolicy("CreateRolePolicy", policy =>
                {
                    policy.RequireAssertion(context =>
                    {
                        return (context.User.IsInRole("Admin") && context.User.HasClaim(c => c.Type.Equals("CREATE ROLE"))) || context.User.IsInRole("Super Admin");
                    });
                }); 

                options.AddPolicy("EditRolePolicy", policy =>
                {
                    policy.RequireAssertion(context => 
                    {
                        return (context.User.IsInRole("Admin") && context.User.HasClaim(c => c.Type.Equals("EDIT ROLE"))) || context.User.IsInRole("Super Admin");
                    });
                });

                options.AddPolicy("DeleteRolePolicy", policy =>
                {
                    policy.RequireAssertion(context =>
                    {
                        return (context.User.IsInRole("Admin") && context.User.HasClaim(c => c.Type.Equals("DELETE ROLE"))) || context.User.IsInRole("Super Admin");
                    });
                });

                options.AddPolicy("AssignRolePolicy", policy =>
                {
                    policy.AddRequirements(new AssignRolesRequirement());
                });
            });


            // Registering the Handlers
            services.AddScoped<IAuthorizationHandler, CanAssignRolesToOnlyOtherUsersHandler>();
            services.AddScoped<IAuthorizationHandler, IsSuperAdminHandler>();


            return services;
        }
    }
}
